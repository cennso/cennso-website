concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
name: Lighthouse Performance Check
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
jobs:
  lighthouse:
    name: Run Lighthouse audits
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up NodeJS
        uses: actions/setup-node@v4
      - name: Install Yarn
        run: |-
          npm install -g yarn
          yarn -v
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build production-ready website
        run: yarn build
      - name: Start production server
        run: yarn start:ci & # & - The ampersand runs the command in the background, allowing the workflow to continue to the next step without waiting for the server to finish
      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 1; done'
      - name: Run Lighthouse audit (Desktop + Mobile)
        run: |
          set -euo pipefail

          # Not calling yarn lighthouse as if desktop fails than mobile won't run
          yarn lighthouse:desktop
          yarn lighthouse:mobile

          # Verify all artifacts exist (generated by process-lhci-results.js)
          if [ ! -f ./lighthouse-results.json ] || [ ! -f ./lighthouse-desktop.html ]; then
            echo "Error: Desktop Lighthouse artifacts missing."
            exit 1
          fi

          if [ ! -f ./lighthouse-mobile-results.json ] || [ ! -f ./lighthouse-mobile.html ]; then
            echo "Error: Mobile Lighthouse artifacts missing."
            exit 1
          fi
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            lighthouse-results.json
            lighthouse-mobile-results.json
            lighthouse-desktop.html
            lighthouse-mobile.html
      - name: Check Lighthouse scores (100% required)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            // github-script runs from repo root, files are in repo root
            const desktopResults = JSON.parse(await fs.readFile('lighthouse-results.json', 'utf8'));
            const mobileResults = JSON.parse(await fs.readFile('lighthouse-mobile-results.json', 'utf8'));
            
            let comment = '## üîç Lighthouse Audit Results\n\n';
            
            // Add links to detailed HTML reports
            const runId = context.runId;
            const repoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            comment += `üìä **Detailed Reports**: [Desktop HTML](${repoUrl}/actions/runs/${runId}) | [Mobile HTML](${repoUrl}/actions/runs/${runId})\n`;
            comment += `_(Download the \`lighthouse-results\` artifact from the workflow run to view full HTML reports)_\n\n`;
            
            // Desktop scores
            comment += '### üñ•Ô∏è Desktop\n\n';
            comment += '| Category | Score | Status |\n';
            comment += '|----------|-------|--------|\n';
            
            let allPassed = true;
            for (const [key, value] of Object.entries(desktopResults.categories)) {
              if (key === 'pwa') continue; // Skip PWA category
              const score = Math.round(value.score * 100);
              const status = score === 100 ? '‚úÖ PASS' : '‚ùå FAIL';
              if (score !== 100) allPassed = false;
              comment += `| ${value.title} | ${score} | ${status} |\n`;
            }
            
            // Mobile scores
            comment += '\n### üì± Mobile\n\n';
            comment += '| Category | Score | Status |\n';
            comment += '|----------|-------|--------|\n';
            
            for (const [key, value] of Object.entries(mobileResults.categories)) {
              if (key === 'pwa') continue; // Skip PWA category
              const score = Math.round(value.score * 100);
              const status = score === 100 ? '‚úÖ PASS' : '‚ùå FAIL';
              if (score !== 100) allPassed = false;
              comment += `| ${value.title} | ${score} | ${status} |\n`;
            }
            
            comment += '\n';
            if (allPassed) {
              comment += '‚úÖ **All scores are 100%** - Quality gate passed!';
            } else {
              comment += '‚ùå **Some scores below 100%** - Please improve Lighthouse scores to 100% on all categories (Performance, Accessibility, Best Practices, SEO).\n\n';
              comment += 'üí° **View the detailed HTML reports** (in artifacts) for specific recommendations on what to fix.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            if (!allPassed) {
              core.setFailed('Lighthouse scores must be 100% on all categories');
            }
